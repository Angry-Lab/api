// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testParcelStats(t *testing.T) {
	t.Parallel()

	query := ParcelStats()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testParcelStatsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ParcelStat{}
	if err = randomize.Struct(seed, o, parcelStatDBTypes, true, parcelStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ParcelStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ParcelStats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testParcelStatsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ParcelStat{}
	if err = randomize.Struct(seed, o, parcelStatDBTypes, true, parcelStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ParcelStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ParcelStats().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ParcelStats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testParcelStatsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ParcelStat{}
	if err = randomize.Struct(seed, o, parcelStatDBTypes, true, parcelStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ParcelStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ParcelStatSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ParcelStats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testParcelStatsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ParcelStat{}
	if err = randomize.Struct(seed, o, parcelStatDBTypes, true, parcelStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ParcelStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ParcelStatExists(ctx, tx, o.Hid)
	if err != nil {
		t.Errorf("Unable to check if ParcelStat exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ParcelStatExists to return true, but got false.")
	}
}

func testParcelStatsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ParcelStat{}
	if err = randomize.Struct(seed, o, parcelStatDBTypes, true, parcelStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ParcelStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	parcelStatFound, err := FindParcelStat(ctx, tx, o.Hid)
	if err != nil {
		t.Error(err)
	}

	if parcelStatFound == nil {
		t.Error("want a record, got nil")
	}
}

func testParcelStatsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ParcelStat{}
	if err = randomize.Struct(seed, o, parcelStatDBTypes, true, parcelStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ParcelStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ParcelStats().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testParcelStatsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ParcelStat{}
	if err = randomize.Struct(seed, o, parcelStatDBTypes, true, parcelStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ParcelStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ParcelStats().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testParcelStatsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	parcelStatOne := &ParcelStat{}
	parcelStatTwo := &ParcelStat{}
	if err = randomize.Struct(seed, parcelStatOne, parcelStatDBTypes, false, parcelStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ParcelStat struct: %s", err)
	}
	if err = randomize.Struct(seed, parcelStatTwo, parcelStatDBTypes, false, parcelStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ParcelStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = parcelStatOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = parcelStatTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ParcelStats().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testParcelStatsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	parcelStatOne := &ParcelStat{}
	parcelStatTwo := &ParcelStat{}
	if err = randomize.Struct(seed, parcelStatOne, parcelStatDBTypes, false, parcelStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ParcelStat struct: %s", err)
	}
	if err = randomize.Struct(seed, parcelStatTwo, parcelStatDBTypes, false, parcelStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ParcelStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = parcelStatOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = parcelStatTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ParcelStats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func parcelStatBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ParcelStat) error {
	*o = ParcelStat{}
	return nil
}

func parcelStatAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ParcelStat) error {
	*o = ParcelStat{}
	return nil
}

func parcelStatAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ParcelStat) error {
	*o = ParcelStat{}
	return nil
}

func parcelStatBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ParcelStat) error {
	*o = ParcelStat{}
	return nil
}

func parcelStatAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ParcelStat) error {
	*o = ParcelStat{}
	return nil
}

func parcelStatBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ParcelStat) error {
	*o = ParcelStat{}
	return nil
}

func parcelStatAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ParcelStat) error {
	*o = ParcelStat{}
	return nil
}

func parcelStatBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ParcelStat) error {
	*o = ParcelStat{}
	return nil
}

func parcelStatAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ParcelStat) error {
	*o = ParcelStat{}
	return nil
}

func testParcelStatsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ParcelStat{}
	o := &ParcelStat{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, parcelStatDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ParcelStat object: %s", err)
	}

	AddParcelStatHook(boil.BeforeInsertHook, parcelStatBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	parcelStatBeforeInsertHooks = []ParcelStatHook{}

	AddParcelStatHook(boil.AfterInsertHook, parcelStatAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	parcelStatAfterInsertHooks = []ParcelStatHook{}

	AddParcelStatHook(boil.AfterSelectHook, parcelStatAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	parcelStatAfterSelectHooks = []ParcelStatHook{}

	AddParcelStatHook(boil.BeforeUpdateHook, parcelStatBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	parcelStatBeforeUpdateHooks = []ParcelStatHook{}

	AddParcelStatHook(boil.AfterUpdateHook, parcelStatAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	parcelStatAfterUpdateHooks = []ParcelStatHook{}

	AddParcelStatHook(boil.BeforeDeleteHook, parcelStatBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	parcelStatBeforeDeleteHooks = []ParcelStatHook{}

	AddParcelStatHook(boil.AfterDeleteHook, parcelStatAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	parcelStatAfterDeleteHooks = []ParcelStatHook{}

	AddParcelStatHook(boil.BeforeUpsertHook, parcelStatBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	parcelStatBeforeUpsertHooks = []ParcelStatHook{}

	AddParcelStatHook(boil.AfterUpsertHook, parcelStatAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	parcelStatAfterUpsertHooks = []ParcelStatHook{}
}

func testParcelStatsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ParcelStat{}
	if err = randomize.Struct(seed, o, parcelStatDBTypes, true, parcelStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ParcelStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ParcelStats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testParcelStatsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ParcelStat{}
	if err = randomize.Struct(seed, o, parcelStatDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ParcelStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(parcelStatColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ParcelStats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testParcelStatsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ParcelStat{}
	if err = randomize.Struct(seed, o, parcelStatDBTypes, true, parcelStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ParcelStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testParcelStatsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ParcelStat{}
	if err = randomize.Struct(seed, o, parcelStatDBTypes, true, parcelStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ParcelStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ParcelStatSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testParcelStatsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ParcelStat{}
	if err = randomize.Struct(seed, o, parcelStatDBTypes, true, parcelStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ParcelStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ParcelStats().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	parcelStatDBTypes = map[string]string{`Hid`: `character varying`, `CNT`: `integer`, `TotalCost`: `real`, `TotalNP`: `real`}
	_                 = bytes.MinRead
)

func testParcelStatsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(parcelStatPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(parcelStatAllColumns) == len(parcelStatPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ParcelStat{}
	if err = randomize.Struct(seed, o, parcelStatDBTypes, true, parcelStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ParcelStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ParcelStats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, parcelStatDBTypes, true, parcelStatPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ParcelStat struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testParcelStatsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(parcelStatAllColumns) == len(parcelStatPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ParcelStat{}
	if err = randomize.Struct(seed, o, parcelStatDBTypes, true, parcelStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ParcelStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ParcelStats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, parcelStatDBTypes, true, parcelStatPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ParcelStat struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(parcelStatAllColumns, parcelStatPrimaryKeyColumns) {
		fields = parcelStatAllColumns
	} else {
		fields = strmangle.SetComplement(
			parcelStatAllColumns,
			parcelStatPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ParcelStatSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testParcelStatsUpsert(t *testing.T) {
	t.Parallel()

	if len(parcelStatAllColumns) == len(parcelStatPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ParcelStat{}
	if err = randomize.Struct(seed, &o, parcelStatDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ParcelStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ParcelStat: %s", err)
	}

	count, err := ParcelStats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, parcelStatDBTypes, false, parcelStatPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ParcelStat struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ParcelStat: %s", err)
	}

	count, err = ParcelStats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
