// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Parcel is an object representing the database table.
type Parcel struct {
	ID                    int64         `boil:"id" json:"id" toml:"id" yaml:"id"`
	UID                   string        `boil:"uid" json:"uid" toml:"uid" yaml:"uid"`
	Hid                   string        `boil:"hid" json:"hid" toml:"hid" yaml:"hid"`
	DT                    time.Time     `boil:"dt" json:"dt" toml:"dt" yaml:"dt"`
	SenderIndex           int           `boil:"sender_index" json:"sender_index" toml:"sender_index" yaml:"sender_index"`
	RecipientIndex        int           `boil:"recipient_index" json:"recipient_index" toml:"recipient_index" yaml:"recipient_index"`
	Weight                types.Decimal `boil:"weight" json:"weight" toml:"weight" yaml:"weight"`
	Cost                  types.Decimal `boil:"cost" json:"cost" toml:"cost" yaml:"cost"`
	AmountOts             types.Decimal `boil:"amount_ots" json:"amount_ots" toml:"amount_ots" yaml:"amount_ots"`
	AmountNP              types.Decimal `boil:"amount_np" json:"amount_np" toml:"amount_np" yaml:"amount_np"`
	BlankDispatch         bool          `boil:"blank_dispatch" json:"blank_dispatch" toml:"blank_dispatch" yaml:"blank_dispatch"`
	ParcelPost            bool          `boil:"parcel_post" json:"parcel_post" toml:"parcel_post" yaml:"parcel_post"`
	Accelerated           bool          `boil:"accelerated" json:"accelerated" toml:"accelerated" yaml:"accelerated"`
	International         bool          `boil:"international" json:"international" toml:"international" yaml:"international"`
	WithAdvertValue       bool          `boil:"with_advert_value" json:"with_advert_value" toml:"with_advert_value" yaml:"with_advert_value"`
	WithImpositionPayment bool          `boil:"with_imposition_payment" json:"with_imposition_payment" toml:"with_imposition_payment" yaml:"with_imposition_payment"`
	WithListOfAttachments bool          `boil:"with_list_of_attachments" json:"with_list_of_attachments" toml:"with_list_of_attachments" yaml:"with_list_of_attachments"`
	CautionMark           bool          `boil:"caution_mark" json:"caution_mark" toml:"caution_mark" yaml:"caution_mark"`
	SMSForSender          bool          `boil:"sms_for_sender" json:"sms_for_sender" toml:"sms_for_sender" yaml:"sms_for_sender"`
	SMSForRecipient       bool          `boil:"sms_for_recipient" json:"sms_for_recipient" toml:"sms_for_recipient" yaml:"sms_for_recipient"`
	Distance              types.Decimal `boil:"distance" json:"distance" toml:"distance" yaml:"distance"`
	LowestCost            bool          `boil:"lowest_cost" json:"lowest_cost" toml:"lowest_cost" yaml:"lowest_cost"`

	R *parcelR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L parcelL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ParcelColumns = struct {
	ID                    string
	UID                   string
	Hid                   string
	DT                    string
	SenderIndex           string
	RecipientIndex        string
	Weight                string
	Cost                  string
	AmountOts             string
	AmountNP              string
	BlankDispatch         string
	ParcelPost            string
	Accelerated           string
	International         string
	WithAdvertValue       string
	WithImpositionPayment string
	WithListOfAttachments string
	CautionMark           string
	SMSForSender          string
	SMSForRecipient       string
	Distance              string
	LowestCost            string
}{
	ID:                    "id",
	UID:                   "uid",
	Hid:                   "hid",
	DT:                    "dt",
	SenderIndex:           "sender_index",
	RecipientIndex:        "recipient_index",
	Weight:                "weight",
	Cost:                  "cost",
	AmountOts:             "amount_ots",
	AmountNP:              "amount_np",
	BlankDispatch:         "blank_dispatch",
	ParcelPost:            "parcel_post",
	Accelerated:           "accelerated",
	International:         "international",
	WithAdvertValue:       "with_advert_value",
	WithImpositionPayment: "with_imposition_payment",
	WithListOfAttachments: "with_list_of_attachments",
	CautionMark:           "caution_mark",
	SMSForSender:          "sms_for_sender",
	SMSForRecipient:       "sms_for_recipient",
	Distance:              "distance",
	LowestCost:            "lowest_cost",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var ParcelWhere = struct {
	ID                    whereHelperint64
	UID                   whereHelperstring
	Hid                   whereHelperstring
	DT                    whereHelpertime_Time
	SenderIndex           whereHelperint
	RecipientIndex        whereHelperint
	Weight                whereHelpertypes_Decimal
	Cost                  whereHelpertypes_Decimal
	AmountOts             whereHelpertypes_Decimal
	AmountNP              whereHelpertypes_Decimal
	BlankDispatch         whereHelperbool
	ParcelPost            whereHelperbool
	Accelerated           whereHelperbool
	International         whereHelperbool
	WithAdvertValue       whereHelperbool
	WithImpositionPayment whereHelperbool
	WithListOfAttachments whereHelperbool
	CautionMark           whereHelperbool
	SMSForSender          whereHelperbool
	SMSForRecipient       whereHelperbool
	Distance              whereHelpertypes_Decimal
	LowestCost            whereHelperbool
}{
	ID:                    whereHelperint64{field: "\"parcel\".\"id\""},
	UID:                   whereHelperstring{field: "\"parcel\".\"uid\""},
	Hid:                   whereHelperstring{field: "\"parcel\".\"hid\""},
	DT:                    whereHelpertime_Time{field: "\"parcel\".\"dt\""},
	SenderIndex:           whereHelperint{field: "\"parcel\".\"sender_index\""},
	RecipientIndex:        whereHelperint{field: "\"parcel\".\"recipient_index\""},
	Weight:                whereHelpertypes_Decimal{field: "\"parcel\".\"weight\""},
	Cost:                  whereHelpertypes_Decimal{field: "\"parcel\".\"cost\""},
	AmountOts:             whereHelpertypes_Decimal{field: "\"parcel\".\"amount_ots\""},
	AmountNP:              whereHelpertypes_Decimal{field: "\"parcel\".\"amount_np\""},
	BlankDispatch:         whereHelperbool{field: "\"parcel\".\"blank_dispatch\""},
	ParcelPost:            whereHelperbool{field: "\"parcel\".\"parcel_post\""},
	Accelerated:           whereHelperbool{field: "\"parcel\".\"accelerated\""},
	International:         whereHelperbool{field: "\"parcel\".\"international\""},
	WithAdvertValue:       whereHelperbool{field: "\"parcel\".\"with_advert_value\""},
	WithImpositionPayment: whereHelperbool{field: "\"parcel\".\"with_imposition_payment\""},
	WithListOfAttachments: whereHelperbool{field: "\"parcel\".\"with_list_of_attachments\""},
	CautionMark:           whereHelperbool{field: "\"parcel\".\"caution_mark\""},
	SMSForSender:          whereHelperbool{field: "\"parcel\".\"sms_for_sender\""},
	SMSForRecipient:       whereHelperbool{field: "\"parcel\".\"sms_for_recipient\""},
	Distance:              whereHelpertypes_Decimal{field: "\"parcel\".\"distance\""},
	LowestCost:            whereHelperbool{field: "\"parcel\".\"lowest_cost\""},
}

// ParcelRels is where relationship names are stored.
var ParcelRels = struct {
}{}

// parcelR is where relationships are stored.
type parcelR struct {
}

// NewStruct creates a new relationship struct
func (*parcelR) NewStruct() *parcelR {
	return &parcelR{}
}

// parcelL is where Load methods for each relationship are stored.
type parcelL struct{}

var (
	parcelAllColumns            = []string{"id", "uid", "hid", "dt", "sender_index", "recipient_index", "weight", "cost", "amount_ots", "amount_np", "blank_dispatch", "parcel_post", "accelerated", "international", "with_advert_value", "with_imposition_payment", "with_list_of_attachments", "caution_mark", "sms_for_sender", "sms_for_recipient", "distance", "lowest_cost"}
	parcelColumnsWithoutDefault = []string{"uid", "hid", "dt", "sender_index", "recipient_index", "weight", "cost", "blank_dispatch", "parcel_post", "accelerated", "international", "with_advert_value", "with_imposition_payment", "with_list_of_attachments", "caution_mark", "sms_for_sender", "sms_for_recipient"}
	parcelColumnsWithDefault    = []string{"id", "amount_ots", "amount_np", "distance", "lowest_cost"}
	parcelPrimaryKeyColumns     = []string{"id"}
)

type (
	// ParcelSlice is an alias for a slice of pointers to Parcel.
	// This should generally be used opposed to []Parcel.
	ParcelSlice []*Parcel
	// ParcelHook is the signature for custom Parcel hook methods
	ParcelHook func(context.Context, boil.ContextExecutor, *Parcel) error

	parcelQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	parcelType                 = reflect.TypeOf(&Parcel{})
	parcelMapping              = queries.MakeStructMapping(parcelType)
	parcelPrimaryKeyMapping, _ = queries.BindMapping(parcelType, parcelMapping, parcelPrimaryKeyColumns)
	parcelInsertCacheMut       sync.RWMutex
	parcelInsertCache          = make(map[string]insertCache)
	parcelUpdateCacheMut       sync.RWMutex
	parcelUpdateCache          = make(map[string]updateCache)
	parcelUpsertCacheMut       sync.RWMutex
	parcelUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var parcelBeforeInsertHooks []ParcelHook
var parcelBeforeUpdateHooks []ParcelHook
var parcelBeforeDeleteHooks []ParcelHook
var parcelBeforeUpsertHooks []ParcelHook

var parcelAfterInsertHooks []ParcelHook
var parcelAfterSelectHooks []ParcelHook
var parcelAfterUpdateHooks []ParcelHook
var parcelAfterDeleteHooks []ParcelHook
var parcelAfterUpsertHooks []ParcelHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Parcel) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range parcelBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Parcel) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range parcelBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Parcel) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range parcelBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Parcel) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range parcelBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Parcel) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range parcelAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Parcel) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range parcelAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Parcel) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range parcelAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Parcel) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range parcelAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Parcel) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range parcelAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddParcelHook registers your hook function for all future operations.
func AddParcelHook(hookPoint boil.HookPoint, parcelHook ParcelHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		parcelBeforeInsertHooks = append(parcelBeforeInsertHooks, parcelHook)
	case boil.BeforeUpdateHook:
		parcelBeforeUpdateHooks = append(parcelBeforeUpdateHooks, parcelHook)
	case boil.BeforeDeleteHook:
		parcelBeforeDeleteHooks = append(parcelBeforeDeleteHooks, parcelHook)
	case boil.BeforeUpsertHook:
		parcelBeforeUpsertHooks = append(parcelBeforeUpsertHooks, parcelHook)
	case boil.AfterInsertHook:
		parcelAfterInsertHooks = append(parcelAfterInsertHooks, parcelHook)
	case boil.AfterSelectHook:
		parcelAfterSelectHooks = append(parcelAfterSelectHooks, parcelHook)
	case boil.AfterUpdateHook:
		parcelAfterUpdateHooks = append(parcelAfterUpdateHooks, parcelHook)
	case boil.AfterDeleteHook:
		parcelAfterDeleteHooks = append(parcelAfterDeleteHooks, parcelHook)
	case boil.AfterUpsertHook:
		parcelAfterUpsertHooks = append(parcelAfterUpsertHooks, parcelHook)
	}
}

// One returns a single parcel record from the query.
func (q parcelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Parcel, error) {
	o := &Parcel{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for parcel")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Parcel records from the query.
func (q parcelQuery) All(ctx context.Context, exec boil.ContextExecutor) (ParcelSlice, error) {
	var o []*Parcel

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to Parcel slice")
	}

	if len(parcelAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Parcel records in the query.
func (q parcelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count parcel rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q parcelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if parcel exists")
	}

	return count > 0, nil
}

// Parcels retrieves all the records using an executor.
func Parcels(mods ...qm.QueryMod) parcelQuery {
	mods = append(mods, qm.From("\"parcel\""))
	return parcelQuery{NewQuery(mods...)}
}

// FindParcel retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindParcel(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Parcel, error) {
	parcelObj := &Parcel{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"parcel\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, parcelObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from parcel")
	}

	return parcelObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Parcel) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no parcel provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(parcelColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	parcelInsertCacheMut.RLock()
	cache, cached := parcelInsertCache[key]
	parcelInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			parcelAllColumns,
			parcelColumnsWithDefault,
			parcelColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(parcelType, parcelMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(parcelType, parcelMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"parcel\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"parcel\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into parcel")
	}

	if !cached {
		parcelInsertCacheMut.Lock()
		parcelInsertCache[key] = cache
		parcelInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Parcel.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Parcel) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	parcelUpdateCacheMut.RLock()
	cache, cached := parcelUpdateCache[key]
	parcelUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			parcelAllColumns,
			parcelPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update parcel, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"parcel\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, parcelPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(parcelType, parcelMapping, append(wl, parcelPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update parcel row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for parcel")
	}

	if !cached {
		parcelUpdateCacheMut.Lock()
		parcelUpdateCache[key] = cache
		parcelUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q parcelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for parcel")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for parcel")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ParcelSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), parcelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"parcel\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, parcelPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in parcel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all parcel")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Parcel) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no parcel provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(parcelColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	parcelUpsertCacheMut.RLock()
	cache, cached := parcelUpsertCache[key]
	parcelUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			parcelAllColumns,
			parcelColumnsWithDefault,
			parcelColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			parcelAllColumns,
			parcelPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert parcel, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(parcelPrimaryKeyColumns))
			copy(conflict, parcelPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"parcel\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(parcelType, parcelMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(parcelType, parcelMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert parcel")
	}

	if !cached {
		parcelUpsertCacheMut.Lock()
		parcelUpsertCache[key] = cache
		parcelUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Parcel record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Parcel) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no Parcel provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), parcelPrimaryKeyMapping)
	sql := "DELETE FROM \"parcel\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from parcel")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for parcel")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q parcelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no parcelQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from parcel")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for parcel")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ParcelSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(parcelBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), parcelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"parcel\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, parcelPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from parcel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for parcel")
	}

	if len(parcelAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Parcel) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindParcel(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ParcelSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ParcelSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), parcelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"parcel\".* FROM \"parcel\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, parcelPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in ParcelSlice")
	}

	*o = slice

	return nil
}

// ParcelExists checks if the Parcel row exists.
func ParcelExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"parcel\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if parcel exists")
	}

	return exists, nil
}
