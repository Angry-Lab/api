// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCityIndices(t *testing.T) {
	t.Parallel()

	query := CityIndices()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCityIndicesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CityIndex{}
	if err = randomize.Struct(seed, o, cityIndexDBTypes, true, cityIndexColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CityIndex struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CityIndices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCityIndicesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CityIndex{}
	if err = randomize.Struct(seed, o, cityIndexDBTypes, true, cityIndexColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CityIndex struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := CityIndices().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CityIndices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCityIndicesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CityIndex{}
	if err = randomize.Struct(seed, o, cityIndexDBTypes, true, cityIndexColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CityIndex struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CityIndexSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CityIndices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCityIndicesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CityIndex{}
	if err = randomize.Struct(seed, o, cityIndexDBTypes, true, cityIndexColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CityIndex struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CityIndexExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if CityIndex exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CityIndexExists to return true, but got false.")
	}
}

func testCityIndicesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CityIndex{}
	if err = randomize.Struct(seed, o, cityIndexDBTypes, true, cityIndexColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CityIndex struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	cityIndexFound, err := FindCityIndex(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if cityIndexFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCityIndicesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CityIndex{}
	if err = randomize.Struct(seed, o, cityIndexDBTypes, true, cityIndexColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CityIndex struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = CityIndices().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCityIndicesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CityIndex{}
	if err = randomize.Struct(seed, o, cityIndexDBTypes, true, cityIndexColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CityIndex struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := CityIndices().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCityIndicesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	cityIndexOne := &CityIndex{}
	cityIndexTwo := &CityIndex{}
	if err = randomize.Struct(seed, cityIndexOne, cityIndexDBTypes, false, cityIndexColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CityIndex struct: %s", err)
	}
	if err = randomize.Struct(seed, cityIndexTwo, cityIndexDBTypes, false, cityIndexColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CityIndex struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = cityIndexOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = cityIndexTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CityIndices().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCityIndicesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	cityIndexOne := &CityIndex{}
	cityIndexTwo := &CityIndex{}
	if err = randomize.Struct(seed, cityIndexOne, cityIndexDBTypes, false, cityIndexColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CityIndex struct: %s", err)
	}
	if err = randomize.Struct(seed, cityIndexTwo, cityIndexDBTypes, false, cityIndexColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CityIndex struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = cityIndexOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = cityIndexTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CityIndices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func cityIndexBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *CityIndex) error {
	*o = CityIndex{}
	return nil
}

func cityIndexAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *CityIndex) error {
	*o = CityIndex{}
	return nil
}

func cityIndexAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *CityIndex) error {
	*o = CityIndex{}
	return nil
}

func cityIndexBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CityIndex) error {
	*o = CityIndex{}
	return nil
}

func cityIndexAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CityIndex) error {
	*o = CityIndex{}
	return nil
}

func cityIndexBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CityIndex) error {
	*o = CityIndex{}
	return nil
}

func cityIndexAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CityIndex) error {
	*o = CityIndex{}
	return nil
}

func cityIndexBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CityIndex) error {
	*o = CityIndex{}
	return nil
}

func cityIndexAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CityIndex) error {
	*o = CityIndex{}
	return nil
}

func testCityIndicesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &CityIndex{}
	o := &CityIndex{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, cityIndexDBTypes, false); err != nil {
		t.Errorf("Unable to randomize CityIndex object: %s", err)
	}

	AddCityIndexHook(boil.BeforeInsertHook, cityIndexBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	cityIndexBeforeInsertHooks = []CityIndexHook{}

	AddCityIndexHook(boil.AfterInsertHook, cityIndexAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	cityIndexAfterInsertHooks = []CityIndexHook{}

	AddCityIndexHook(boil.AfterSelectHook, cityIndexAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	cityIndexAfterSelectHooks = []CityIndexHook{}

	AddCityIndexHook(boil.BeforeUpdateHook, cityIndexBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	cityIndexBeforeUpdateHooks = []CityIndexHook{}

	AddCityIndexHook(boil.AfterUpdateHook, cityIndexAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	cityIndexAfterUpdateHooks = []CityIndexHook{}

	AddCityIndexHook(boil.BeforeDeleteHook, cityIndexBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	cityIndexBeforeDeleteHooks = []CityIndexHook{}

	AddCityIndexHook(boil.AfterDeleteHook, cityIndexAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	cityIndexAfterDeleteHooks = []CityIndexHook{}

	AddCityIndexHook(boil.BeforeUpsertHook, cityIndexBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	cityIndexBeforeUpsertHooks = []CityIndexHook{}

	AddCityIndexHook(boil.AfterUpsertHook, cityIndexAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	cityIndexAfterUpsertHooks = []CityIndexHook{}
}

func testCityIndicesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CityIndex{}
	if err = randomize.Struct(seed, o, cityIndexDBTypes, true, cityIndexColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CityIndex struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CityIndices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCityIndicesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CityIndex{}
	if err = randomize.Struct(seed, o, cityIndexDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CityIndex struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(cityIndexColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := CityIndices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCityIndicesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CityIndex{}
	if err = randomize.Struct(seed, o, cityIndexDBTypes, true, cityIndexColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CityIndex struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCityIndicesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CityIndex{}
	if err = randomize.Struct(seed, o, cityIndexDBTypes, true, cityIndexColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CityIndex struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CityIndexSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCityIndicesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CityIndex{}
	if err = randomize.Struct(seed, o, cityIndexDBTypes, true, cityIndexColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CityIndex struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CityIndices().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	cityIndexDBTypes = map[string]string{`ID`: `integer`, `Postcode`: `integer`, `Name`: `character varying`, `Latitude`: `numeric`, `Longitude`: `numeric`}
	_                = bytes.MinRead
)

func testCityIndicesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(cityIndexPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(cityIndexAllColumns) == len(cityIndexPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CityIndex{}
	if err = randomize.Struct(seed, o, cityIndexDBTypes, true, cityIndexColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CityIndex struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CityIndices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, cityIndexDBTypes, true, cityIndexPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CityIndex struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCityIndicesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(cityIndexAllColumns) == len(cityIndexPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CityIndex{}
	if err = randomize.Struct(seed, o, cityIndexDBTypes, true, cityIndexColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CityIndex struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CityIndices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, cityIndexDBTypes, true, cityIndexPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CityIndex struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(cityIndexAllColumns, cityIndexPrimaryKeyColumns) {
		fields = cityIndexAllColumns
	} else {
		fields = strmangle.SetComplement(
			cityIndexAllColumns,
			cityIndexPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CityIndexSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCityIndicesUpsert(t *testing.T) {
	t.Parallel()

	if len(cityIndexAllColumns) == len(cityIndexPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := CityIndex{}
	if err = randomize.Struct(seed, &o, cityIndexDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CityIndex struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CityIndex: %s", err)
	}

	count, err := CityIndices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, cityIndexDBTypes, false, cityIndexPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CityIndex struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CityIndex: %s", err)
	}

	count, err = CityIndices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
