// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testParcels(t *testing.T) {
	t.Parallel()

	query := Parcels()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testParcelsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Parcel{}
	if err = randomize.Struct(seed, o, parcelDBTypes, true, parcelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Parcel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Parcels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testParcelsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Parcel{}
	if err = randomize.Struct(seed, o, parcelDBTypes, true, parcelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Parcel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Parcels().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Parcels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testParcelsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Parcel{}
	if err = randomize.Struct(seed, o, parcelDBTypes, true, parcelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Parcel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ParcelSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Parcels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testParcelsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Parcel{}
	if err = randomize.Struct(seed, o, parcelDBTypes, true, parcelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Parcel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ParcelExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Parcel exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ParcelExists to return true, but got false.")
	}
}

func testParcelsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Parcel{}
	if err = randomize.Struct(seed, o, parcelDBTypes, true, parcelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Parcel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	parcelFound, err := FindParcel(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if parcelFound == nil {
		t.Error("want a record, got nil")
	}
}

func testParcelsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Parcel{}
	if err = randomize.Struct(seed, o, parcelDBTypes, true, parcelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Parcel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Parcels().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testParcelsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Parcel{}
	if err = randomize.Struct(seed, o, parcelDBTypes, true, parcelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Parcel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Parcels().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testParcelsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	parcelOne := &Parcel{}
	parcelTwo := &Parcel{}
	if err = randomize.Struct(seed, parcelOne, parcelDBTypes, false, parcelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Parcel struct: %s", err)
	}
	if err = randomize.Struct(seed, parcelTwo, parcelDBTypes, false, parcelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Parcel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = parcelOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = parcelTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Parcels().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testParcelsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	parcelOne := &Parcel{}
	parcelTwo := &Parcel{}
	if err = randomize.Struct(seed, parcelOne, parcelDBTypes, false, parcelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Parcel struct: %s", err)
	}
	if err = randomize.Struct(seed, parcelTwo, parcelDBTypes, false, parcelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Parcel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = parcelOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = parcelTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Parcels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func parcelBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Parcel) error {
	*o = Parcel{}
	return nil
}

func parcelAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Parcel) error {
	*o = Parcel{}
	return nil
}

func parcelAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Parcel) error {
	*o = Parcel{}
	return nil
}

func parcelBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Parcel) error {
	*o = Parcel{}
	return nil
}

func parcelAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Parcel) error {
	*o = Parcel{}
	return nil
}

func parcelBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Parcel) error {
	*o = Parcel{}
	return nil
}

func parcelAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Parcel) error {
	*o = Parcel{}
	return nil
}

func parcelBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Parcel) error {
	*o = Parcel{}
	return nil
}

func parcelAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Parcel) error {
	*o = Parcel{}
	return nil
}

func testParcelsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Parcel{}
	o := &Parcel{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, parcelDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Parcel object: %s", err)
	}

	AddParcelHook(boil.BeforeInsertHook, parcelBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	parcelBeforeInsertHooks = []ParcelHook{}

	AddParcelHook(boil.AfterInsertHook, parcelAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	parcelAfterInsertHooks = []ParcelHook{}

	AddParcelHook(boil.AfterSelectHook, parcelAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	parcelAfterSelectHooks = []ParcelHook{}

	AddParcelHook(boil.BeforeUpdateHook, parcelBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	parcelBeforeUpdateHooks = []ParcelHook{}

	AddParcelHook(boil.AfterUpdateHook, parcelAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	parcelAfterUpdateHooks = []ParcelHook{}

	AddParcelHook(boil.BeforeDeleteHook, parcelBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	parcelBeforeDeleteHooks = []ParcelHook{}

	AddParcelHook(boil.AfterDeleteHook, parcelAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	parcelAfterDeleteHooks = []ParcelHook{}

	AddParcelHook(boil.BeforeUpsertHook, parcelBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	parcelBeforeUpsertHooks = []ParcelHook{}

	AddParcelHook(boil.AfterUpsertHook, parcelAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	parcelAfterUpsertHooks = []ParcelHook{}
}

func testParcelsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Parcel{}
	if err = randomize.Struct(seed, o, parcelDBTypes, true, parcelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Parcel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Parcels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testParcelsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Parcel{}
	if err = randomize.Struct(seed, o, parcelDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Parcel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(parcelColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Parcels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testParcelsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Parcel{}
	if err = randomize.Struct(seed, o, parcelDBTypes, true, parcelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Parcel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testParcelsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Parcel{}
	if err = randomize.Struct(seed, o, parcelDBTypes, true, parcelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Parcel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ParcelSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testParcelsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Parcel{}
	if err = randomize.Struct(seed, o, parcelDBTypes, true, parcelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Parcel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Parcels().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	parcelDBTypes = map[string]string{`ID`: `bigint`, `UID`: `character varying`, `Hid`: `character varying`, `DT`: `timestamp without time zone`, `SenderIndex`: `integer`, `RecipientIndex`: `integer`, `Weight`: `numeric`, `Cost`: `numeric`, `AmountOts`: `numeric`, `AmountNP`: `numeric`, `BlankDispatch`: `boolean`, `ParcelPost`: `boolean`, `Accelerated`: `boolean`, `International`: `boolean`, `WithAdvertValue`: `boolean`, `WithImpositionPayment`: `boolean`, `WithListOfAttachments`: `boolean`, `CautionMark`: `boolean`, `SMSForSender`: `boolean`, `SMSForRecipient`: `boolean`, `Distance`: `numeric`, `LowestCost`: `boolean`}
	_             = bytes.MinRead
)

func testParcelsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(parcelPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(parcelAllColumns) == len(parcelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Parcel{}
	if err = randomize.Struct(seed, o, parcelDBTypes, true, parcelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Parcel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Parcels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, parcelDBTypes, true, parcelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Parcel struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testParcelsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(parcelAllColumns) == len(parcelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Parcel{}
	if err = randomize.Struct(seed, o, parcelDBTypes, true, parcelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Parcel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Parcels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, parcelDBTypes, true, parcelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Parcel struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(parcelAllColumns, parcelPrimaryKeyColumns) {
		fields = parcelAllColumns
	} else {
		fields = strmangle.SetComplement(
			parcelAllColumns,
			parcelPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ParcelSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testParcelsUpsert(t *testing.T) {
	t.Parallel()

	if len(parcelAllColumns) == len(parcelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Parcel{}
	if err = randomize.Struct(seed, &o, parcelDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Parcel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Parcel: %s", err)
	}

	count, err := Parcels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, parcelDBTypes, false, parcelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Parcel struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Parcel: %s", err)
	}

	count, err = Parcels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
